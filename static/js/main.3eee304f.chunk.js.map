{"version":3,"sources":["ComponentDetail/Api/index.js","ComponentDetail/Code/index.js","ComponentDetail/Demo/index.js","ComponentDetail/Document/index.js","ComponentDetail/index.js","components/DraftJsEditor/index.js","routes/index.js","routes/Test.js","routes/DraftJsEditor.js","App.js","reportWebVitals.js","index.js"],"names":["Api","props","state","component","this","className","style","marginBottom","usage","fontSize","color","name","length","map","item","index","marginLeft","api","Component","Code","folder","files","borderLeft","code","js","value","disabled","css","Demo","onChange","setState","marginTop","background","minHeight","borderRadius","padding","Document","document","NAVS","ComponentDetail","renderMainContent","activeKey","Nav","variant","onSelect","eventKey","Item","Link","Editor","Draft","EditorState","RichUtils","getDefaultKeyBinding","DraftJsEditor","editorState","htmlText","stateToHTML","getCurrentContent","window","__editorStateChangeTimeout","clearTimeout","setTimeout","createEmpty","focus","refs","editor","handleKeyCommand","_handleKeyCommand","bind","mapKeyToEditorCommand","_mapKeyToEditorCommand","toggleBlockType","_toggleBlockType","toggleInlineStyle","_toggleInlineStyle","contentState","stateFromHTML","createWithContent","height","editorEl","querySelector","command","newState","e","keyCode","newEditorState","onTab","blockType","inlineStyle","hasText","getBlockMap","first","getType","onToggle","onClick","blockStyleFn","getBlockStyle","customStyleMap","styleMap","keyBindingFn","placeholder","ref","spellCheck","React","CODE","backgroundColor","fontFamily","block","StyleButton","preventDefault","active","onMouseDown","label","BLOCK_TYPES","BlockStyleControls","selection","getSelection","getBlockForKey","getStartKey","type","INLINE_STYLES","InlineStyleControls","currentStyle","getCurrentInlineStyle","has","routes","textHtml","console","log","Stack","gap","direction","href","target","rel","id","sort","a","b","App","selected","margin","display","minWidth","ListGroup","action","borderRight","flex","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.3eee304f.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./styles.css\";\r\n\r\nclass Api extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n\r\n  render() {\r\n    const { component } = this.props;\r\n\r\n    return (\r\n      <div className=\"api\">\r\n        <div style={{ marginBottom: \"1em\" }}>\r\n          <h5>Usage</h5>\r\n          {component.usage && (\r\n            <div\r\n              className=\"code-block\"\r\n              style={{\r\n                fontSize: \"1.1em\",\r\n                color: \"#ffffff\",\r\n              }}\r\n            >\r\n              &#60;\r\n              <span className=\"component-name\">{component.usage?.name}</span>\r\n              {component.usage?.props?.length > 0 &&\r\n                component.usage?.props.map((item, index) => (\r\n                  <div key={index} style={{ marginLeft: \"1em\" }}>\r\n                    <span className=\"component-prop-name\">{item[0]}</span>=\r\n                    <span className=\"component-prop-value\">{item[1]}</span>\r\n                  </div>\r\n                ))}\r\n              &#47;&#62;\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        <div style={{ marginBottom: \"1em\" }}>\r\n          <h5>API</h5>\r\n          <table>\r\n            <thead>\r\n              <tr>\r\n                <th>Name</th>\r\n                <th>Type</th>\r\n                <th>Default</th>\r\n                <th>Description</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {component.api?.length > 0 &&\r\n                component.api.map((item, index) => (\r\n                  <tr key={index}>\r\n                    <td>{item[0]}</td>\r\n                    <td>{item[1]}</td>\r\n                    <td>{item[2]}</td>\r\n                    <td>{item[3]}</td>\r\n                  </tr>\r\n                ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Api;\r\n","import React, { Component } from \"react\";\r\nimport \"./styles.css\";\r\n\r\nclass Code extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n\r\n  render() {\r\n    const { component } = this.props;\r\n\r\n    return (\r\n      <div className=\"code\">\r\n        {component.folder && (\r\n          <div style={{ marginBottom: \"1em\" }}>\r\n            <h5>Folder</h5>\r\n            <div className=\"code-block\">\r\n              <div>{component.folder.folder}</div>\r\n              <div style={{ marginLeft: \"1em\" }}>\r\n                {component.folder.files?.length > 0 &&\r\n                  component.folder.files.map((item, index) => (\r\n                    <div\r\n                      key={index}\r\n                      style={{ borderLeft: \"1px solid #e6db74\" }}\r\n                    >\r\n                      - {item}\r\n                    </div>\r\n                  ))}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        {component.code?.js && (\r\n          <div style={{ marginBottom: \"1em\" }}>\r\n            <h5>JS code</h5>\r\n            <textarea\r\n              className=\"code-block\"\r\n              value={component.code.js}\r\n              disabled={true}\r\n            />\r\n          </div>\r\n        )}\r\n\r\n        {component.code?.css && (\r\n          <div style={{ marginBottom: \"1em\" }}>\r\n            <h5>CSS code</h5>\r\n            <textarea\r\n              className=\"code-block\"\r\n              value={component.code.css}\r\n              disabled={true}\r\n            />\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Code;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Demo extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      value: \"\",\r\n    };\r\n  }\r\n\r\n  render() {\r\n    const { component } = this.props;\r\n    const { value } = this.state;\r\n\r\n    return (\r\n      <div>\r\n        <h5>Demo</h5>\r\n\r\n        {component.component && (\r\n          <component.component\r\n            {...component.props}\r\n            onChange={(value) =>\r\n              component.onChange ? this.setState({ value }) : null\r\n            }\r\n          />\r\n        )}\r\n\r\n        {component.onChange && (\r\n          <div style={{ marginTop: \"1em\" }}>\r\n            <h5>Result</h5>\r\n            <div\r\n              style={{\r\n                background: \"#dcdcdc\",\r\n                minHeight: 100,\r\n                borderRadius: 4,\r\n                padding: \"1em\",\r\n              }}\r\n            >\r\n              {value}\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Demo;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Document extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n\r\n  render() {\r\n    const { component } = this.props;\r\n\r\n    return (\r\n      <div>\r\n        <h5>Document</h5>\r\n        {component.document}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Document;\r\n","import React, { Component } from \"react\";\r\nimport { Nav } from \"react-bootstrap\";\r\nimport Api from \"./Api\";\r\nimport Code from \"./Code\";\r\nimport Demo from \"./Demo\";\r\nimport Document from \"./Document\";\r\n\r\nconst NAVS = [\"Demo\", \"Document\", \"API\", \"Code\"];\r\n\r\nclass ComponentDetail extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      activeKey: NAVS[0],\r\n    };\r\n  }\r\n\r\n  renderMainContent = () => {\r\n    const { component } = this.props;\r\n    const { activeKey } = this.state;\r\n\r\n    switch (activeKey) {\r\n      case \"Demo\":\r\n        return <Demo component={component} />;\r\n\r\n      case \"Document\":\r\n        return <Document component={component} />;\r\n\r\n      case \"API\":\r\n        return <Api component={component} />;\r\n\r\n      case \"Code\":\r\n        return <Code component={component} />;\r\n\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { activeKey } = this.state;\r\n\r\n    return (\r\n      <div>\r\n        <Nav\r\n          variant=\"tabs\"\r\n          activeKey={activeKey}\r\n          onSelect={(eventKey) => this.setState({ activeKey: eventKey })}\r\n        >\r\n          {NAVS.map((item, index) => (\r\n            <Nav.Item key={index}>\r\n              <Nav.Link eventKey={item}>{item}</Nav.Link>\r\n            </Nav.Item>\r\n          ))}\r\n        </Nav>\r\n\r\n        <div style={{ padding: \"1em 0\" }}>{this.renderMainContent()}</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ComponentDetail;\r\n","import React from \"react\";\r\nimport Draft from \"draft-js\";\r\nimport { stateToHTML } from \"draft-js-export-html\";\r\nimport { stateFromHTML } from \"draft-js-import-html\";\r\nimport \"./styles.css\";\r\n\r\nconst { Editor, EditorState, RichUtils, getDefaultKeyBinding } = Draft;\r\n\r\nexport default class DraftJsEditor extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { editorState: EditorState.createEmpty() };\r\n    this.focus = () => this.refs.editor.focus();\r\n    this.handleKeyCommand = this._handleKeyCommand.bind(this);\r\n    this.mapKeyToEditorCommand = this._mapKeyToEditorCommand.bind(this);\r\n    this.toggleBlockType = this._toggleBlockType.bind(this);\r\n    this.toggleInlineStyle = this._toggleInlineStyle.bind(this);\r\n  }\r\n  componentDidMount() {\r\n    if (this.props.htmlText) {\r\n      let contentState = stateFromHTML(this.props.htmlText);\r\n      this.setState({\r\n        editorState: EditorState.createWithContent(contentState),\r\n      });\r\n    }\r\n\r\n    if (this.props.height) {\r\n      let editorEl = document.querySelector(\r\n        \".RichEditor-editor .public-DraftEditor-content\"\r\n      );\r\n      if (editorEl) {\r\n        editorEl.style.minHeight = this.props.height + \"px\";\r\n      }\r\n    }\r\n  }\r\n  onChange = (editorState) => {\r\n    this.setState({ editorState });\r\n\r\n    let htmlText = stateToHTML(editorState.getCurrentContent());\r\n\r\n    if (window.__editorStateChangeTimeout) {\r\n      clearTimeout(window.__editorStateChangeTimeout);\r\n    }\r\n\r\n    window.__editorStateChangeTimeout = setTimeout(\r\n      () =>\r\n        htmlText !== this.props.htmlText ? this.props.onChange(htmlText) : null,\r\n      400\r\n    );\r\n  };\r\n  _handleKeyCommand(command, editorState) {\r\n    const newState = RichUtils.handleKeyCommand(editorState, command);\r\n    if (newState) {\r\n      this.onChange(newState);\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n  _mapKeyToEditorCommand(e) {\r\n    if (e.keyCode === 9 /* TAB */) {\r\n      const newEditorState = RichUtils.onTab(\r\n        e,\r\n        this.state.editorState,\r\n        4 /* maxDepth */\r\n      );\r\n      if (newEditorState !== this.state.editorState) {\r\n        this.onChange(newEditorState);\r\n      }\r\n      return;\r\n    }\r\n    return getDefaultKeyBinding(e);\r\n  }\r\n  _toggleBlockType(blockType) {\r\n    this.onChange(RichUtils.toggleBlockType(this.state.editorState, blockType));\r\n  }\r\n  _toggleInlineStyle(inlineStyle) {\r\n    this.onChange(\r\n      RichUtils.toggleInlineStyle(this.state.editorState, inlineStyle)\r\n    );\r\n  }\r\n  render() {\r\n    const { editorState } = this.state;\r\n    // If the user changes block type before entering any text, we can\r\n    // either style the placeholder or hide it. Let's just hide it now.\r\n    let className = \"RichEditor-editor\";\r\n    var contentState = editorState.getCurrentContent();\r\n    if (!contentState.hasText()) {\r\n      if (contentState.getBlockMap().first().getType() !== \"unstyled\") {\r\n        className += \" RichEditor-hidePlaceholder\";\r\n      }\r\n    }\r\n    return (\r\n      <div className=\"RichEditor-root\">\r\n        <BlockStyleControls\r\n          editorState={editorState}\r\n          onToggle={this.toggleBlockType}\r\n        />\r\n        <InlineStyleControls\r\n          editorState={editorState}\r\n          onToggle={this.toggleInlineStyle}\r\n        />\r\n        <div className={className} onClick={this.focus}>\r\n          <Editor\r\n            blockStyleFn={getBlockStyle}\r\n            customStyleMap={styleMap}\r\n            editorState={editorState}\r\n            handleKeyCommand={this.handleKeyCommand}\r\n            keyBindingFn={this.mapKeyToEditorCommand}\r\n            onChange={this.onChange}\r\n            placeholder=\"\"\r\n            ref=\"editor\"\r\n            spellCheck={true}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n// Custom overrides for \"code\" style.\r\nconst styleMap = {\r\n  CODE: {\r\n    backgroundColor: \"rgba(0, 0, 0, 0.05)\",\r\n    fontFamily: '\"Inconsolata\", \"Menlo\", \"Consolas\", monospace',\r\n    fontSize: 16,\r\n    padding: 2,\r\n  },\r\n};\r\nfunction getBlockStyle(block) {\r\n  switch (block.getType()) {\r\n    case \"blockquote\":\r\n      return \"RichEditor-blockquote\";\r\n    default:\r\n      return null;\r\n  }\r\n}\r\nclass StyleButton extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.onToggle = (e) => {\r\n      e.preventDefault();\r\n      this.props.onToggle(this.props.style);\r\n    };\r\n  }\r\n  render() {\r\n    let className = \"RichEditor-styleButton\";\r\n    if (this.props.active) {\r\n      className += \" RichEditor-activeButton\";\r\n    }\r\n    return (\r\n      <span className={className} onMouseDown={this.onToggle}>\r\n        {this.props.label}\r\n      </span>\r\n    );\r\n  }\r\n}\r\nconst BLOCK_TYPES = [\r\n  { label: \"H1\", style: \"header-one\" },\r\n  { label: \"H2\", style: \"header-two\" },\r\n  { label: \"H3\", style: \"header-three\" },\r\n  { label: \"H4\", style: \"header-four\" },\r\n  { label: \"H5\", style: \"header-five\" },\r\n  { label: \"H6\", style: \"header-six\" },\r\n  { label: \"Blockquote\", style: \"blockquote\" },\r\n  { label: \"UL\", style: \"unordered-list-item\" },\r\n  { label: \"OL\", style: \"ordered-list-item\" },\r\n  { label: \"Code Block\", style: \"code-block\" },\r\n];\r\nconst BlockStyleControls = (props) => {\r\n  const { editorState } = props;\r\n  const selection = editorState.getSelection();\r\n  const blockType = editorState\r\n    .getCurrentContent()\r\n    .getBlockForKey(selection.getStartKey())\r\n    .getType();\r\n  return (\r\n    <div className=\"RichEditor-controls\">\r\n      {BLOCK_TYPES.map((type) => (\r\n        <StyleButton\r\n          key={type.label}\r\n          active={type.style === blockType}\r\n          label={type.label}\r\n          onToggle={props.onToggle}\r\n          style={type.style}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\nvar INLINE_STYLES = [\r\n  { label: \"Bold\", style: \"BOLD\" },\r\n  { label: \"Italic\", style: \"ITALIC\" },\r\n  { label: \"Underline\", style: \"UNDERLINE\" },\r\n  { label: \"Monospace\", style: \"CODE\" },\r\n];\r\nconst InlineStyleControls = (props) => {\r\n  const currentStyle = props.editorState.getCurrentInlineStyle();\r\n\r\n  return (\r\n    <div className=\"RichEditor-controls\">\r\n      {INLINE_STYLES.map((type) => (\r\n        <StyleButton\r\n          key={type.label}\r\n          active={currentStyle.has(type.style)}\r\n          label={type.label}\r\n          onToggle={props.onToggle}\r\n          style={type.style}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n","import Test from \"./Test\";\r\nimport DraftJsEditor from \"./DraftJsEditor\";\r\n\r\nlet routes = [Test, DraftJsEditor];\r\n\r\nroutes = routes.map((item, index) => ({ ...item, id: index + 1 }));\r\n\r\nroutes.sort((a, b) => (a.name < b.name ? -1 : a.name > b.name ? 1 : 0));\r\n\r\nexport default routes;\r\n","export default {\r\n  name: \"Test\",\r\n  component: null,\r\n  props: null,\r\n  onChange: null,\r\n  document: null,\r\n  api: [],\r\n  usage: null,\r\n  folder: null,\r\n  code: null,\r\n};\r\n","import React from \"react\";\r\nimport { Stack } from \"react-bootstrap\";\r\nimport DraftJsEditor from \"../components/DraftJsEditor\";\r\n\r\nexport default {\r\n  name: \"DraftJsEditor\",\r\n  component: DraftJsEditor,\r\n  props: {\r\n    textHtml: \"\",\r\n    onChange: () => console.log(\"\"),\r\n    height: 200,\r\n  },\r\n  onChange: (value) => null,\r\n  document: (\r\n    <Stack gap={2}>\r\n      <Stack direction=\"horizontal\" gap={2}>\r\n        <div>Home page:</div>\r\n        <a href=\"https://draftjs.org/\" target=\"_blank\" rel=\"noreferrer\">\r\n          https://draftjs.org/\r\n        </a>\r\n      </Stack>\r\n      <Stack direction=\"horizontal\" gap={2}>\r\n        <div>Repository:</div>\r\n        <a href=\"github.com/facebook/draft-js\" target=\"_blank\" rel=\"noreferrer\">\r\n          github.com/facebook/draft-js\r\n        </a>\r\n      </Stack>\r\n      <Stack direction=\"horizontal\" gap={2}>\r\n        <div>NPM:</div>\r\n        <a\r\n          href=\"https://www.npmjs.com/package/draft-js\"\r\n          target=\"_blank\"\r\n          rel=\"noreferrer\"\r\n        >\r\n          https://www.npmjs.com/package/draft-js\r\n        </a>\r\n      </Stack>\r\n    </Stack>\r\n  ),\r\n  api: [\r\n    [\r\n      \"textHtml\",\r\n      \"string\",\r\n      \"\",\r\n      \"The value of the input element, required for a controlled component.\",\r\n    ],\r\n    [\"onChange\", \"func\", \"\", \"Callback fired when the value is changed.\"],\r\n    [\"height\", \"number\", \"200\", \"Number of pixel height to editor form.\"],\r\n  ],\r\n  usage: {\r\n    name: \"DraftJsEditor\",\r\n    props: [\r\n      [\"textHtml\", '\"\"'],\r\n      [\"onChange\", \"{(textHtml) => {}}\"],\r\n      [\"height\", \"{200}\"],\r\n    ],\r\n  },\r\n  folder: {\r\n    folder: \"DraftJsEditor\",\r\n    files: [\"index.js\", \"styles.css\"],\r\n  },\r\n  code: {\r\n    js: `\r\n      import React from \"react\";\r\n      import Draft from \"draft-js\";\r\n      import { stateToHTML } from \"draft-js-export-html\";\r\n      import { stateFromHTML } from \"draft-js-import-html\";\r\n      import \"./styles.css\";\r\n\r\n      const { Editor, EditorState, RichUtils, getDefaultKeyBinding } = Draft;\r\n\r\n      export default class DraftJsEditor extends React.Component {\r\n        constructor(props) {\r\n          super(props);\r\n          this.state = { editorState: EditorState.createEmpty() };\r\n          this.focus = () => this.refs.editor.focus();\r\n          this.handleKeyCommand = this._handleKeyCommand.bind(this);\r\n          this.mapKeyToEditorCommand = this._mapKeyToEditorCommand.bind(this);\r\n          this.toggleBlockType = this._toggleBlockType.bind(this);\r\n          this.toggleInlineStyle = this._toggleInlineStyle.bind(this);\r\n        }\r\n        componentDidMount() {\r\n          if (this.props.htmlText) {\r\n            let contentState = stateFromHTML(this.props.htmlText);\r\n            this.setState({\r\n              editorState: EditorState.createWithContent(contentState),\r\n            });\r\n          }\r\n\r\n          if (this.props.height) {\r\n            let editorEl = document.querySelector(\r\n              \".RichEditor-editor .public-DraftEditor-content\"\r\n            );\r\n            if (editorEl) {\r\n              editorEl.style.minHeight = this.props.height + \"px\";\r\n            }\r\n          }\r\n        }\r\n        onChange = (editorState) => {\r\n          this.setState({ editorState });\r\n\r\n          let htmlText = stateToHTML(editorState.getCurrentContent());\r\n\r\n          if (window.__editorStateChangeTimeout) {\r\n            clearTimeout(window.__editorStateChangeTimeout);\r\n          }\r\n\r\n          window.__editorStateChangeTimeout = setTimeout(\r\n            () =>\r\n              htmlText !== this.props.htmlText ? this.props.onChange(htmlText) : null,\r\n            400\r\n          );\r\n        };\r\n        _handleKeyCommand(command, editorState) {\r\n          const newState = RichUtils.handleKeyCommand(editorState, command);\r\n          if (newState) {\r\n            this.onChange(newState);\r\n            return true;\r\n          }\r\n          return false;\r\n        }\r\n        _mapKeyToEditorCommand(e) {\r\n          if (e.keyCode === 9 /* TAB */) {\r\n            const newEditorState = RichUtils.onTab(\r\n              e,\r\n              this.state.editorState,\r\n              4 /* maxDepth */\r\n            );\r\n            if (newEditorState !== this.state.editorState) {\r\n              this.onChange(newEditorState);\r\n            }\r\n            return;\r\n          }\r\n          return getDefaultKeyBinding(e);\r\n        }\r\n        _toggleBlockType(blockType) {\r\n          this.onChange(RichUtils.toggleBlockType(this.state.editorState, blockType));\r\n        }\r\n        _toggleInlineStyle(inlineStyle) {\r\n          this.onChange(\r\n            RichUtils.toggleInlineStyle(this.state.editorState, inlineStyle)\r\n          );\r\n        }\r\n        render() {\r\n          const { editorState } = this.state;\r\n          // If the user changes block type before entering any text, we can\r\n          // either style the placeholder or hide it. Let's just hide it now.\r\n          let className = \"RichEditor-editor\";\r\n          var contentState = editorState.getCurrentContent();\r\n          if (!contentState.hasText()) {\r\n            if (contentState.getBlockMap().first().getType() !== \"unstyled\") {\r\n              className += \" RichEditor-hidePlaceholder\";\r\n            }\r\n          }\r\n          return (\r\n            <div className=\"RichEditor-root\">\r\n              <BlockStyleControls\r\n                editorState={editorState}\r\n                onToggle={this.toggleBlockType}\r\n              />\r\n              <InlineStyleControls\r\n                editorState={editorState}\r\n                onToggle={this.toggleInlineStyle}\r\n              />\r\n              <div className={className} onClick={this.focus}>\r\n                <Editor\r\n                  blockStyleFn={getBlockStyle}\r\n                  customStyleMap={styleMap}\r\n                  editorState={editorState}\r\n                  handleKeyCommand={this.handleKeyCommand}\r\n                  keyBindingFn={this.mapKeyToEditorCommand}\r\n                  onChange={this.onChange}\r\n                  placeholder=\"\"\r\n                  ref=\"editor\"\r\n                  spellCheck={true}\r\n                />\r\n              </div>\r\n            </div>\r\n          );\r\n        }\r\n      }\r\n      // Custom overrides for \"code\" style.\r\n      const styleMap = {\r\n        CODE: {\r\n          backgroundColor: \"rgba(0, 0, 0, 0.05)\",\r\n          fontFamily: '\"Inconsolata\", \"Menlo\", \"Consolas\", monospace',\r\n          fontSize: 16,\r\n          padding: 2,\r\n        },\r\n      };\r\n      function getBlockStyle(block) {\r\n        switch (block.getType()) {\r\n          case \"blockquote\":\r\n            return \"RichEditor-blockquote\";\r\n          default:\r\n            return null;\r\n        }\r\n      }\r\n      class StyleButton extends React.Component {\r\n        constructor() {\r\n          super();\r\n          this.onToggle = (e) => {\r\n            e.preventDefault();\r\n            this.props.onToggle(this.props.style);\r\n          };\r\n        }\r\n        render() {\r\n          let className = \"RichEditor-styleButton\";\r\n          if (this.props.active) {\r\n            className += \" RichEditor-activeButton\";\r\n          }\r\n          return (\r\n            <span className={className} onMouseDown={this.onToggle}>\r\n              {this.props.label}\r\n            </span>\r\n          );\r\n        }\r\n      }\r\n      const BLOCK_TYPES = [\r\n        { label: \"H1\", style: \"header-one\" },\r\n        { label: \"H2\", style: \"header-two\" },\r\n        { label: \"H3\", style: \"header-three\" },\r\n        { label: \"H4\", style: \"header-four\" },\r\n        { label: \"H5\", style: \"header-five\" },\r\n        { label: \"H6\", style: \"header-six\" },\r\n        { label: \"Blockquote\", style: \"blockquote\" },\r\n        { label: \"UL\", style: \"unordered-list-item\" },\r\n        { label: \"OL\", style: \"ordered-list-item\" },\r\n        { label: \"Code Block\", style: \"code-block\" },\r\n      ];\r\n      const BlockStyleControls = (props) => {\r\n        const { editorState } = props;\r\n        const selection = editorState.getSelection();\r\n        const blockType = editorState\r\n          .getCurrentContent()\r\n          .getBlockForKey(selection.getStartKey())\r\n          .getType();\r\n        return (\r\n          <div className=\"RichEditor-controls\">\r\n            {BLOCK_TYPES.map((type) => (\r\n              <StyleButton\r\n                key={type.label}\r\n                active={type.style === blockType}\r\n                label={type.label}\r\n                onToggle={props.onToggle}\r\n                style={type.style}\r\n              />\r\n            ))}\r\n          </div>\r\n        );\r\n      };\r\n      var INLINE_STYLES = [\r\n        { label: \"Bold\", style: \"BOLD\" },\r\n        { label: \"Italic\", style: \"ITALIC\" },\r\n        { label: \"Underline\", style: \"UNDERLINE\" },\r\n        { label: \"Monospace\", style: \"CODE\" },\r\n      ];\r\n      const InlineStyleControls = (props) => {\r\n        const currentStyle = props.editorState.getCurrentInlineStyle();\r\n\r\n        return (\r\n          <div className=\"RichEditor-controls\">\r\n            {INLINE_STYLES.map((type) => (\r\n              <StyleButton\r\n                key={type.label}\r\n                active={currentStyle.has(type.style)}\r\n                label={type.label}\r\n                onToggle={props.onToggle}\r\n                style={type.style}\r\n              />\r\n            ))}\r\n          </div>\r\n        );\r\n      };\r\n    `,\r\n    css: `\r\n      .RichEditor-root {\r\n        background: #fff;\r\n        border: 1px solid #ddd;\r\n        font-family: \"Georgia\", serif;\r\n        font-size: 14px;\r\n        border: 1px solid #cccccc;\r\n        border-radius: 4px;\r\n      }\r\n      \r\n      .RichEditor-controls {\r\n        margin: 15px;\r\n      }\r\n      \r\n      .RichEditor-editor {\r\n        border-top: 1px solid #ddd;\r\n        cursor: text;\r\n        font-size: 16px;\r\n      }\r\n      \r\n      .RichEditor-editor .public-DraftEditorPlaceholder-root,\r\n      .RichEditor-editor .public-DraftEditor-content {\r\n        padding: 15px;\r\n      }\r\n      \r\n      .RichEditor-editor .public-DraftEditor-content {\r\n        min-height: 200px;\r\n      }\r\n      \r\n      .RichEditor-hidePlaceholder .public-DraftEditorPlaceholder-root {\r\n        display: none;\r\n      }\r\n      \r\n      .RichEditor-editor .RichEditor-blockquote {\r\n        border-left: 5px solid #eee;\r\n        color: #666;\r\n        font-family: \"Hoefler Text\", \"Georgia\", serif;\r\n        font-style: italic;\r\n        margin: 16px 0;\r\n        padding: 10px 20px;\r\n      }\r\n      \r\n      .RichEditor-editor .public-DraftStyleDefault-pre {\r\n        background-color: rgba(0, 0, 0, 0.05);\r\n        font-family: \"Inconsolata\", \"Menlo\", \"Consolas\", monospace;\r\n        font-size: 16px;\r\n        padding: 20px;\r\n      }\r\n      \r\n      .RichEditor-controls {\r\n        font-family: \"Helvetica\", sans-serif;\r\n        font-size: 14px;\r\n        margin-bottom: 5px;\r\n        user-select: none;\r\n      }\r\n      \r\n      .RichEditor-styleButton {\r\n        color: #999;\r\n        cursor: pointer;\r\n        margin-right: 16px;\r\n        padding: 2px 0;\r\n        display: inline-block;\r\n      }\r\n      \r\n      .RichEditor-activeButton {\r\n        color: #5890ff;\r\n      }\r\n    `,\r\n  },\r\n};\r\n","import React, { Component } from \"react\";\nimport { ListGroup } from \"react-bootstrap\";\nimport ComponentDetail from \"./ComponentDetail\";\nimport routes from \"./routes\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selected: null,\n    };\n  }\n\n  render() {\n    const { selected } = this.state;\n\n    return (\n      <div style={{ margin: \"1em\", display: \"flex\", height: \"100vh\" }}>\n        <div\n          style={{\n            minWidth: 200,\n          }}\n        >\n          <ListGroup variant=\"flush\">\n            {routes.map((item, index) => (\n              <ListGroup.Item\n                key={index}\n                action\n                onClick={() => this.setState({ selected: item })}\n                variant={selected?.id === item.id ? \"primary\" : \"\"}\n              >\n                {item.name}\n              </ListGroup.Item>\n            ))}\n          </ListGroup>\n        </div>\n        <div\n          style={{\n            borderRight: \"1px solid #dcdcdc\",\n            margin: \"0 1em\",\n          }}\n        ></div>\n        <div style={{ flex: 1 }}>\n          {selected && <ComponentDetail component={selected} />}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}